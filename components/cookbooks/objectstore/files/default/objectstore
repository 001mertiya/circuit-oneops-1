#!/usr/bin/env ruby

require 'rubygems'
require 'optparse'
require 'json'

# Segment limit and buffer size for Openstack file upload
SEGMENT_LIMIT = 5 * 1024 * 1024 * 1024 - 1       # 5GB -1
BUFFER_SIZE = 1024 * 1024                        # 1MB

def list_directories_or_files(conn, options, argv)
  # check if need to list files or directories
  if argv.size > 1
    container = conn.directories.get(argv[1])
    if container.nil?
      puts "Container does not exist: #{argv[1]}"
      exit 1
    end
    if options[:verbose]
      container.files.each do |file|
        puts file.inspect if file.key !~ %r/\/objstr-seg-[0-9]{5}/
      end
    else
      container.files.each do |file|
        puts file.key if file.key !~ %r/\/objstr-seg-[0-9]{5}/
      end
    end
  else
    if options[:verbose]
      puts conn.directories.inspect
    else
      conn.directories.each do |container|
        puts container.key
      end
    end
  end
end

def delete_directory_or_file(conn, argv)
  # Gets the name of the file or directory which we intent to delete
  container_or_remote_file = argv[1]
  if container_or_remote_file.include?('/')
    container = container_or_remote_file.split('/').first
    directory = conn.directories.get(container)
    if directory.nil?
      puts "Cannot get container: #{container}"
      exit 1
    end
    remote_parts = container_or_remote_file.split('/')
    remote_parts.shift
    remote_file = remote_parts.join('/')
    directory.files.each do |file|
      if file.key == remote_file || file.key.include?("#{remote_file}/objstr-seg-")
        if file.key !~ %r/\/objstr-seg-[0-9]{5}/
          puts "removing file: #{file.key} from #{container_or_remote_file}"
        end
        file.destroy
      else
        next
      end
    end
  else
    directory = conn.directories.get(container_or_remote_file)
    directory.files.each do |file|
      if file.key !~ %r/\/objstr-seg-[0-9]{5}/
        puts "removing file: #{file.key} from #{container_or_remote_file}"
      end
      file.destroy
    end
    puts "removing container: #{container_or_remote_file}"
    directory.destroy
  end
end

def upload_directory_or_file(conn, argv, provider)
  source_file_or_dir = argv[1]
  destination_container = argv[2]
  file_exclustion_filter = argv[3] || '*'

  unless File.exist?(source_file_or_dir)
    puts "Given local source file/directory not exists #{source_file_or_dir}"
    exit 1
  end

  directory = conn.directories.get(destination_container)
  if directory.nil?
    puts "Creating the container: #{destination_container}"
    directory = conn.directories.create :key => destination_container
  end

  puts "Uploading local source file/directory: #{source_file_or_dir}, filter: #{file_exclustion_filter} to container: #{destination_container}"
  files = if File.directory?(source_file_or_dir)
            Dir.chdir(source_file_or_dir)
            Dir.glob("**/#{file_exclustion_filter}").reject { |path| File.directory?(path) }
          else
            [source_file_or_dir]
          end

  start_time = Time.now
  size = 0
  files.each_with_index do |file, idx|
    puts "#{idx + 1}/#{files.size}) Upload: #{file} to container: #{destination_container}"
    case provider
    when /OpenStack/
      File.open(file) do |file_upload|
        segment = 0
        until file_upload.eof?
          segment += 1
          offset = 0

          # upload segment to cloud files
          segment_suffix = "objstr-seg-#{segment.to_s.rjust(5, '0')}"
          conn.put_object(destination_container, "#{file}/#{segment_suffix}", nil) do
            if offset <= SEGMENT_LIMIT - BUFFER_SIZE
              buf = file_upload.read(BUFFER_SIZE).to_s
              offset += buf.size
              buf
            else
              ''
            end
          end
        end
      end
      # write manifest file
      conn.put_object_manifest(destination_container, file, 'X-Object-Manifest' => "#{destination_container}/#{file}/")
    when /Azure/
      directory.files.create(:key => file, :body => File.open(file))
    end
    size += File.size(file)
  end
  finish_time = Time.now
  time_taken = finish_time - start_time
  puts "\nUpload is completed, total size: #{format_size(size)} took #{time_taken} sec."
end

def download_directory_or_file(conn, options, argv)
  source_file_or_dir = argv[1].split('/')
  container_name = source_file_or_dir.shift
  source_file = ''
  sub_dir = ''
  unless source_file_or_dir.empty?
    source_file = source_file_or_dir.join('/')
    source_file_or_dir.pop
    sub_dir = source_file_or_dir.join('/')
  end
  container = conn.directories.get(container_name)
  destination_dir = argv[2]

  destination_dir += '/' if destination_dir[-1, 1] != '/'

  mkdir_out = `mkdir -p #{destination_dir}`
  unless $?.success?
    puts "error creating local destination directory: #{destination_dir} - #{mkdir_out}"
    exit 1
  end

  container.files.each do |remote_file|
    if remote_file.key =~ %r/\/objstr-seg-[0-9]{5}/
      next
    else
      if options[:verbose]
        puts "remote_file: #{remote_file.inspect}"
      else
        puts "remote_file: #{remote_file.key}"
      end
      if remote_file.content_type == 'application/directory'
        new_dir = destination_dir + remote_file.key
        puts "Creating local sub directory: #{new_dir}"
        mkdir_out = `mkdir -p #{new_dir}`

        unless $?.success?
          puts "Error creating local sub directory: #{new_dir} - #{mkdir_out}"
          exit 1
        end
      else
        # if bucket is supplied file will be empty
        if source_file.empty? || source_file == remote_file.key
          puts "match on file: #{source_file} #{remote_file.key}"
          # Handling in case of sub directory
          if remote_file.key.include?('/') && sub_dir.empty? || remote_file.key.include?(sub_dir)
            dirs_list = remote_file.key.split('/')
            dirs_list.pop
            dirs = dirs_list.join('/')
            puts "Making local sub directory: #{destination_dir + dirs}"
            `mkdir -p #{destination_dir + dirs}`
            unless $?.success?
              puts "error creating local sub directory: #{destination_dir + dirs}"
              exit 1
            end
          end
          File.open(destination_dir + remote_file.key, 'wb') do |local_file|
            start_time = Time.now
            size = 0
            # Download files in chunks
            container.files.get(remote_file.key) do |chunk, remaining_bytes, total_bytes|
              print("\rDownloaded: #{total_bytes - remaining_bytes} of #{total_bytes}")
              local_file.write(chunk)
            end
            size += File.size(local_file)
            finish_time = Time.now
            time_taken = finish_time - start_time
            puts "\nDownload is completed, total size: #{format_size(size)} took #{time_taken} sec."
          end
        end
      end
    end
  end
end

# Pretty format size.
# @param size size in bytes.
def format_size(size)
  conv = %w[B KB MB GB TB PB EB]
  scale = 1024
  ndx = 1
  return "#{size}#{conv[ndx - 1]}" if size < 2 * (scale**ndx)
  size = size.to_f
  [2, 3, 4, 5, 6, 7].each do |i|
    return format('%.3f %s', (size / (scale**(i - 1))), conv[i - 1]) if size < 2 * (scale**i)
  end
  ndx = 7
  format('%.3f %s', (size / (scale**(ndx - 1))), conv[ndx - 1])
end

# Execution starting point
options = {}
options[:verbose] = false
OptionParser.new do |opts|
  opts.banner = 'Usage: objectstore action [options]'
  opts.on('-v', '--verbose', 'Run verbosely') do |v|
    options[:verbose] = v
  end
end.parse!

action = ARGV[0]
if action.nil?
  puts 'usage: '
  puts 'objectstore list <container>'
  puts 'objectstore upload <directory/file> <container>'
  puts 'objectstore download <container/blob> <local-path>'
  puts 'objectstore delete <container>/<blob>'
  exit 1
end

# Get creds from openrc s3, cloudfiles, etc will use
creds = JSON.parse(File.read('/etc/objectstore_creds.json'))
creds_sym = Hash[creds.map { |(k, v)| [k.to_sym, v] }]
conn = nil
provider = creds['provider']

case provider
when /OpenStack/
  require 'fog'
  puts "Connecting to #{creds['openstack_auth_url']} as #{creds['openstack_username']}..."
  conn = Fog::Storage.new(creds_sym)
when /Azure/
  require 'fog/azurerm'
  puts "Connecting to #{creds['azure_storage_account_name']}..."
  conn = Fog::Storage::AzureRM.new(creds)
else
  puts "Provider #{provider} not supported!"
  exit 1
end

case action
when 'list'
  list_directories_or_files(conn, options, ARGV)

when 'delete'
  if ARGV.size < 2
    puts 'Usage: objectstore delete <container>/<blob>'
    exit 1
  end
  delete_directory_or_file(conn, ARGV)

when 'upload'
  if ARGV.size < 3
    puts 'Usage: upload <directory/file> <container>'
    exit 1
  end
  upload_directory_or_file(conn, ARGV, provider)

when 'download'
  if ARGV.size < 3
    puts 'Usage: objectstore download <container/blob> <local-path>'
    exit 1
  end
  download_directory_or_file(conn, options, ARGV)
else
  puts "Action #{action} not supported!"
  exit 1
end
