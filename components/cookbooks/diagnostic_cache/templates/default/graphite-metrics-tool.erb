#!/usr/bin/env ruby

require 'rubygems'
require 'json'
require 'logger'
require '<%= @install_target_dir %>/couchbase_monitor.rb'

graphite_logfiles_path = '<%= @graphite_logfiles_path %>'
rotate = 10
log_size = 1024000

admin_user = '<%= @admin_user %>'
admin_password = '<%= @admin_password %>'
graphite_servers = JSON.parse('<%= @graphite_servers %>')
graphite_prefix = '<%= @graphite_prefix %>'.gsub(/\.+$/, '').chomp

# OneOps variables
oo_org = '<%= @oo_org %>'.gsub(/\./, '-')
oo_assembly = '<%= @oo_assembly %>'.gsub(/\./, '-')
oo_env = '<%= @oo_env %>'.gsub(/\./, '-')
oo_platform = '<%= @oo_platform %>'.gsub(/\./, '-')
oo_cloud = '<%= @oo_cloud %>'.gsub(/\./, '-')

# Send to configured graphite servers
if (graphite_servers != nil && graphite_servers.length > 0) 

  if (graphite_prefix.length == 0)
    graphite_prefix = "#{oo_org}-#{oo_assembly}-#{oo_platform}"
  end

  couchbase_monitor = CouchbaseMonitor.new('localhost:<%= @couchbase_port %>', admin_user, admin_password, graphite_servers,
                                graphite_prefix, oo_env, oo_cloud, graphite_logfiles_path, rotate, log_size)

  couchbase_monitor.collect_all_stats
end

# Send to DF graphite servers for prod
if (oo_env =~ /(?i)prod/) 
  name = case "#{oo_org}:#{oo_assembly}:#{oo_platform}"
  when 'catdev:cache:asset'
    'catdev-asset'
  when 'catdev:cache:assetgroup'
    'catdev-asset-group'
  when 'catdev:prod-cache:itemstore'
    'catdev'
  when 'LabSitePersonalization:athena-couchbase:athena-cb'
    'athena-couchbase'
  when 'LabSitePersonalization:irs-couchbase:irs-couchbase'
    'irs-couchbase'
  when 'platform:tempo-cache:CouchBase'
    'tempo'
  when 'services:global-inventory-availability:cache'
    'global-inventory-availability'
  when 'services:ims:cache'
    'usims'
  when 'services:Item-Pricing:cache'
    'Item-Pricing'
  when 'services:node-inv-avail:couchbase'
    'node-inv-avail'
  when 'services:pg-orders:order-cache'
    'pg-orders'
  when 'services:Pharma:RxCache'
    'Pharma'
  when 'services:product-grouping:group-cache'
    'product-grouping'
  when 'services:shipmethods:cache'
    'shipmethods'
  when 'services:shippricing:cb-cache'
    'shippricing'
  when 'services:Store-Finder:cache'
    'Store-Finder'
  else
    "#{oo_org}-#{oo_assembly}-#{oo_platform}"
  end

  df_graphite_prefix = "DF.#{name}"
  df_graphite_servers = ['dal-prod-bfd-8.prod.walmart.com:2003', 'dfw-prod-bfd-22.prod.walmart.com:2003']

  df_couchbase_monitor = CouchbaseMonitor.new('localhost:<%= @couchbase_port %>', admin_user, admin_password, df_graphite_servers,
                              df_graphite_prefix, oo_env, oo_cloud, graphite_logfiles_path, rotate, log_size)

  df_couchbase_monitor.collect_all_stats
end
