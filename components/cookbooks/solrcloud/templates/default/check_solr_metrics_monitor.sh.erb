#!/bin/bash

#Set this boolean value to register the echo statements to a tmp log file
log_statements=false

log_echo () {
  if [ "$log_statements" = true ]; then
    echo $1
  fi
}

# Check if the log files are populated.
# Check if the number of metrics are as expected
# Check if the format in which the metrics are being written is correct
# Check the modified dates of files with the system date to make sure the file got updated recently

node_status_log_file="/opt/solr/log/medusa_stats.log"
jmx_log_file="/opt/solr/log/jmx_medusa_stats.log"

jmx_log_file_modified_time=$(date -r $jmx_log_file)
node_status_log_file_modified_time=$(date -r $node_status_log_file)

now_sys_date=$(date)

time_between_jmx_log_sys_date=$(($(date -d "$jmx_log_file_modified_time" '+%s') - $(date -d "$now_sys_date" '+%s')))
time_between_node_status_log_sys_date=$(($(date -d "$node_status_log_file_modified_time" '+%s') - $(date -d "$now_sys_date" '+%s')))

# comparing the modified time stamp of metric log files with current time in the monitoring script.
# if modified time stamp is <= current time stamp then execute the validation scripts otherwise skip the script
if [ "$time_between_jmx_log_sys_date" -gt 0 ] ; then
  return 0
fi

if [ "$time_between_node_status_log_sys_date" -gt 0 ] ; then
  return 0
fi

solrmonitor_down="solr-monitor is down |up=0"
solrmonitor_up="solr-monitor is up |up=100"

jolokia_process=$(ps aux | grep "joloki[a]")

# Check if Jolokia is up and running
if [[ $jolokia_process =~ "-Djetty.base=" ]] ; then

  # Check if log files are not empty
  if [[ ! -s $node_status_log_file ]] ; then
    echo $solrmonitor_down
  fi

  if [[ ! -s $jmx_log_file ]] ; then
    echo $solrmonitor_down
  fi

  # Check if the number of metrics are as expected
  node_status_metrics_number=$(wc -l $node_status_log_file | cut -d ' ' -f 1)

  jmx_metrics_number=$(wc -l $jmx_log_file | cut -d ' ' -f 1)

  if [ ${node_status_metrics_number} -lt 7 ] ; then
    echo $solrmonitor_down
  fi

  if [ ${jmx_metrics_number} -lt 40 ] ; then
    echo $solrmonitor_down
  fi

  # Check if the format in which the metrics are written is in influxdb format
  while IFS='' read -r line || [[ -n "$line" ]]; do
    IFS=' ' read -r -a array <<< "$line"
    array_len=${#array[@]}
    if [ ${array_len} -ne 2 ] ; then
       echo $solrmonitor_down
    fi
  done < "$jmx_log_file"

  # Check if the logs are not updated long back
  if [ "$time_between_jmx_log_sys_date" -lt 0 ] ; then
    time_between_jmx_log_sys_date=${time_between_jmx_log_sys_date#-}
  fi
  echo "$time_between_jmx_log_sys_date"

  if [ "$time_between_node_status_log_sys_date" -lt 0 ] ; then
    time_between_node_status_log_sys_date=${time_between_node_status_log_sys_date#-}
  fi
  echo "$time_between_node_status_log_sys_date"

  if [[ ("$time_between_jmx_log_sys_date" -gt 280) || ("$time_between_node_status_log_sys_date" -gt 280) ]] ; then
    echo $solrmonitor_down
  fi

  echo $solrmonitor_up

else
  echo "Jolokia Proxy is down |up=0"
fi




